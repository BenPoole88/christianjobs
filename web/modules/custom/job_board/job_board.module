<?php

use Drupal\commerce_price\Price;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\datetime\Plugin\Field\FieldType\DateTimeItem;
use Drupal\job_board\Form\JobPostForm;
use Drupal\job_board\JobBoardJobRole;
use Drupal\user\ProfileForm;

/**
 * Implements hook_entity_type_build().
 *
 * @param \Drupal\Core\Entity\EntityTypeInterface[] $entity_types
 */
function job_board_entity_type_build(&$entity_types) {
  if ($entity_type = $entity_types['job_role']) {
    $entity_type->setClass(JobBoardJobRole::class);
    $entity_type->setFormClass('post', JobPostForm::class);
  }

  if ($entity_type = $entity_types['user']) {
    $entity_type->setFormClass('employer_details', ProfileForm::class);
  }
}

/**
 * Implements hook_entity_form_mode_info_alter().
 */
function job_board_entity_form_mode_info_alter(&$display_modes) {
  $display_modes['job_role']['post'] = [
    'id' => 'job_role.post',
    'label' => 'Post',
    'targetEntityType' => 'job_role',
    'cache' => FALSE,
  ];
  $display_modes['user']['employer_details'] = [
    'id' => 'user.employer_details',
    'label' => 'Employer Details',
    'targetEntityType' => 'user',
    'cache' => FALSE,
  ];
}

/**
 * Implements hook_entity_view_mode_info_alter().
 */
function job_board_entity_view_mode_info_alter(&$display_modes) {
  $display_modes['user']['employer_page'] = [
    'id' => 'user.employer_page',
    'label' => 'Employer Page',
    'targetEntityType' => 'user',
    'cache' => TRUE,
  ];
  $display_modes['user']['employer_block'] = [
    'id' => 'user.employer_block',
    'label' => 'Employer Block',
    'targetEntityType' => 'user',
    'cache' => TRUE,
  ];
}

/**
 * Implements hook_entity_base_field_info_alter()
 */
function job_board_entity_base_field_info(EntityTypeInterface $entity_type) {
  if ($entity_type->id() != 'job_role') {
    return [];
  }

  $fields['publish_date'] = BaseFieldDefinition::create('datetime')
    ->setSetting('datetime_type', DateTimeItem::DATETIME_TYPE_DATE)
    ->setLabel(t('Publish Date'))
    ->setDescription(t('The first date on which this job will be published.'))
    ->setRevisionable(TRUE)
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayConfigurable('form', TRUE)
    ->setDisplayOptions('form', [
      'type' => 'date_popup',
    ]);
  $fields['end_date'] = BaseFieldDefinition::create('datetime')
    ->setSetting('datetime_type', DateTimeItem::DATETIME_TYPE_DATE)
    ->setLabel(t('End Date'))
    ->setDescription(t('The last date on which this job will be published.'))
    ->setRevisionable(TRUE)
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayConfigurable('form', TRUE);
  $fields['featured_dates'] = BaseFieldDefinition::create('datetime')
    ->setSetting('datetime_type', DateTimeItem::DATETIME_TYPE_DATE)
    ->setLabel(t('Featured Dates'))
    ->setDescription(t('The dates on which this job is featured.'))
    ->setCardinality(BaseFieldDefinition::CARDINALITY_UNLIMITED)
    ->setRevisionable(TRUE)
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayConfigurable('form', TRUE);

  $fields['package'] = BaseFieldDefinition::create('list_string')
    ->setSetting('allowed_values_function', 'job_board_job_package_options')
    ->setLabel(t('Package'))
    ->setDescription(t('The base backage to use with this job.'))
    ->setCardinality(1)
    ->setRevisionable(TRUE)
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayConfigurable('form', TRUE);
  $fields['paid'] = BaseFieldDefinition::create('boolean')
    ->setLabel(t('Paid'))
    ->setDescription(t('Has this job role been paid for.'))
    ->setSetting('on_label', t('Paid'))
    ->setSetting('off_label', t('Draft'))
    ->setCardinality(1)
    ->setRevisionable(TRUE)
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayConfigurable('form', TRUE);


  return $fields;
}

/**
 * Implements hook_entity_base_field_info_alter().
 */
function job_board_entity_base_field_info_alter(&$fields, EntityTypeInterface $entity_type) {
  if ($entity_type->id() != 'job_role') {
    return;
  }

  $fields['files']->setSetting('file_extensions', 'pdf txt doc docx pptx ppt png');
}

/**
 * Implements hook_form_user_register_form_alter().
 *
 * @param array $form
 * @param FormStateInterface $form_state
 */
function job_board_form_user_register_form_alter(array &$form, FormStateInterface $form_state) {
  if (\Drupal::request()->cookies->get('Drupal_visitor_jobPostRegister') || $form_state->get('job_post_register')) {
    $form_state->set('job_post_register', TRUE);
    $form['actions']['submit']['#submit'][] = 'job_board_user_register_form_submit_redirect';
  }
}

/**
 * Redirect the register form the the employer edit page in the correct circumstances.
 */
function job_board_user_register_form_submit_redirect(array $form, FormStateInterface $form_state) {
  /** @var \Drupal\user\UserInterface $user */
  $user = $form_state->get('user');
  $user->addRole('employer');
  $user->save();

  $form_state->setRedirect('job_board.employer_edit', [
    'user' => $user->id(),
  ]);

  user_cookie_save(['jobPostRegister' => TRUE]);
}

/**
 * Implements hook_form_alter().
 */
function job_board_form_user_employer_details_form_alter(array &$form, FormStateInterface $form_state) {
  if (\Drupal::request()->cookies->get('Drupal_visitor_jobPostRegister')) {
    $form['actions']['submit']['#submit'][] = 'job_board_user_employer_details_form_submit_redirect';
  }
}

/**
 * Redirect the employer details form to the job post form in correct circumstances.
 */
function job_board_user_employer_details_form_submit_redirect(array $form, FormStateInterface $form_state) {
  $form_state->setRedirect('job_board.post');
  user_cookie_delete('jobPostRegister');
}

/**
 * Get the Job Package Options.
 */
function job_board_job_package_options() {
  $info = job_board_job_package_info();

  $options = [];
  foreach ($info as $key => $package) {
    $options[$key] = $package['label'];
  }

  return $options;
}

/**
 * Get the Package Info.
 */
function job_board_job_package_info($key = NULL) {
  $info = [];
  $info['basic'] = [
    'label' => t('Basic'),
    'price' => new Price('50.00', 'GBP'),
    'allowed_featured_dates' => 1,
  ];
  $info['premium'] = [
    'label' => t('Premium'),
    'price' => new Price('75.00', 'GBP'),
    'allowed_featured_dates' => 5,
  ];

  return $key ? (isset($info[$key]) ? $info[$key] : NULL) : $info;
}
