<?php

use Drupal\commerce_price\Price;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\ContentEntityForm;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\datetime\Plugin\Field\FieldType\DateTimeItem;
use Drupal\job_board\Form\JobPostForm;
use Drupal\job_board\JobBoardJobRole;
use Drupal\job_board\JobBoardJobRoleAccessControlHandler;
use Drupal\user\Entity\User;
use Drupal\user\EntityOwnerInterface;
use Drupal\user\ProfileForm;

/**
 * Implements hook_module_implements_alter().
 */
function job_board_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_alter' && isset($implementations['job_board'])) {
    $group = $implementations['job_board'];
    unset($implementations['job_board']);
    $implementations['job_board'] = $group;
  }
}

/**
 * Implements hook_entity_type_build().
 *
 * @param \Drupal\Core\Entity\EntityTypeInterface[] $entity_types
 */
function job_board_entity_type_build(&$entity_types) {
  if ($entity_type = $entity_types['job_role']) {
    $entity_type->setClass(JobBoardJobRole::class);
    $entity_type->setFormClass('post', JobPostForm::class);
    $entity_type->setHandlerClass('access', JobBoardJobRoleAccessControlHandler::class);
  }

  if ($entity_type = $entity_types['user']) {
    $entity_type->setFormClass('employer_details', ContentEntityForm::class);
  }
}

/**
 * Implements hook_entity_base_field_info()
 */
function job_board_entity_base_field_info(EntityTypeInterface $entity_type) {
  if ($entity_type->id() != 'job_role') {
    return [];
  }

  $fields['publish_date'] = BaseFieldDefinition::create('datetime')
    ->setSetting('datetime_type', DateTimeItem::DATETIME_TYPE_DATE)
    ->setLabel(t('Publish Date'))
    ->setDescription(t('The first date on which this job will be published.'))
    ->setRevisionable(TRUE)
    ->setRequired(TRUE)
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayConfigurable('form', TRUE)
    ->setDisplayOptions('form', [
      'type' => 'date_popup',
    ]);
  $fields['end_date'] = BaseFieldDefinition::create('datetime')
    ->setSetting('datetime_type', DateTimeItem::DATETIME_TYPE_DATE)
    ->setLabel(t('End Date'))
    ->setDescription(t('The last date on which this job will be published.'))
    ->setRevisionable(TRUE)
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayConfigurable('form', TRUE);
  $fields['featured_dates'] = BaseFieldDefinition::create('datetime')
    ->setSetting('datetime_type', DateTimeItem::DATETIME_TYPE_DATE)
    ->setLabel(t('Featured Dates'))
    ->setDescription(t('The dates on which this job is featured.'))
    ->setCardinality(BaseFieldDefinition::CARDINALITY_UNLIMITED)
    ->setRevisionable(TRUE)
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayConfigurable('form', TRUE);

  $fields['package'] = BaseFieldDefinition::create('list_string')
    ->setSetting('allowed_values_function', 'job_board_job_package_options')
    ->setLabel(t('Package'))
    ->setDescription(t('The base backage to use with this job.'))
    ->setCardinality(1)
    ->setRevisionable(TRUE)
    ->setRequired(TRUE)
    ->setDefaultValue('basic')
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayConfigurable('form', TRUE);
  $fields['paid'] = BaseFieldDefinition::create('boolean')
    ->setLabel(t('Paid'))
    ->setDescription(t('Has this job role been paid for.'))
    ->setSetting('on_label', t('Paid'))
    ->setSetting('off_label', t('Draft'))
    ->setCardinality(1)
    ->setRevisionable(TRUE)
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayConfigurable('form', TRUE);

  $fields['keywords'] = BaseFieldDefinition::create('entity_reference')
    ->setSetting('target_type', 'taxonomy_term')
    ->setSetting('handler', 'default:taxonomy_term')
    ->setSetting('handler_settings', [
      'target_bundles' => [
        'keywords' => 'keywords',
      ],
    ])
    ->setLabel(t('Keywords'))
    ->setDescription(t('Select up to 10 keywords to describe this job.'))
    ->setCardinality(10)
    ->setRevisionable(TRUE)
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayOptions('form', [
      'type' => 'entity_reference_autocomplete_tags',
    ])
    ->setDisplayConfigurable('form', TRUE);
  $fields['industry'] = BaseFieldDefinition::create('entity_reference')
    ->setSetting('target_type', 'taxonomy_term')
    ->setSetting('handler', 'default:taxonomy_term')
    ->setSetting('handler_settings', [
      'target_bundles' => [
        'keywords' => 'industries',
      ],
    ])
    ->setLabel(t('Industry'))
    ->setDescription(t('Select an industry.'))
    ->setCardinality(1)
    ->setRevisionable(TRUE)
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayOptions('form', [
      'type' => 'entity_reference_autocomplete',
    ])
    ->setDisplayConfigurable('form', TRUE);

  $fields['compensation'] = BaseFieldDefinition::create('list_string')
    ->setSetting('allowed_values', [
      'volunteer' => t('Volunteer'),
      'apprentice' => t('Apprentice'),
      'pro_rate' => t('Pro-Rata'),
      'salaried' => t('Salaried'),
    ])
    ->setLabel(t('Compensation'))
    ->setDescription(t('How is the role compensated?'))
    ->setRevisionable(TRUE)
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayOptions('form', [
      'type' => 'options_select',
    ])
    ->setDisplayConfigurable('form', TRUE);
  $fields['hours'] = BaseFieldDefinition::create('list_string')
    ->setSetting('allowed_values', [
      'part_time' => t('Part Time'),
      'full_time' => t('Full Time'),
      'flexible' => t('Flexible'),
      'zero' => t('Zero-Hours'),
    ])
    ->setLabel(t('Hours'))
    ->setRevisionable(TRUE)
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayOptions('form', [
      'type' => 'options_select',
    ])
    ->setDisplayConfigurable('form', TRUE);

  $fields['location'] = BaseFieldDefinition::create('address')
    ->setLabel(t('Location'))
    ->setSetting('field_overrides', [
      'givenName' => ['override' => 'hidden'],
      'additionalName' => ['override' => 'hidden'],
      'familyName' => ['override' => 'hidden'],
      'organization' => ['override' => 'hidden'],
      'addressLine1' => ['override' => 'hidden'],
      'addressLine2' => ['override' => 'hidden'],
      'postalCode' => ['override' => 'hidden'],
      'sortingCode' => ['override' => 'hidden'],
      'dependentLocality' => ['override' => 'hidden'],
    ])
    ->setRevisionable(TRUE)
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayConfigurable('form', TRUE)
    ->setDisplayOptions('form', [
      'type' => 'address_default',
    ]);

  $fields['contact_phone'] = BaseFieldDefinition::create('telephone')
    ->setLabel(t('Contact Telephone'))
    ->setRevisionable(TRUE)
    ->setDefaultValueCallback('job_board_job_role_contact_default_value')
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayOptions('form', [
      'type' => 'telephone_default',
    ])
    ->setDisplayConfigurable('form', TRUE);
  $fields['contact_address'] = BaseFieldDefinition::create('address')
    ->setLabel(t('Contact Address'))
    ->setRevisionable(TRUE)
    ->setDefaultValueCallback('job_board_job_role_contact_default_value')
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayOptions('form', [
      'type' => 'address_default',
    ])
    ->setDisplayConfigurable('form', TRUE);
  $fields['contact_email'] = BaseFieldDefinition::create('email')
    ->setLabel(t('Contact E-mail Address'))
    ->setRevisionable(TRUE)
    ->setDefaultValueCallback('job_board_job_role_contact_default_value')
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayOptions('form', [
      'type' => 'email_default',
    ])
    ->setDisplayConfigurable('form', TRUE);

  return $fields;
}

/**
 * Implements hook_entity_base_field_info_alter().
 */
function job_board_entity_base_field_info_alter(&$fields, EntityTypeInterface $entity_type) {
  if ($entity_type->id() != 'job_role') {
    return;
  }

  $fields['files']->setSetting('file_extensions', 'pdf txt doc docx pptx ppt png');
}

/**
 * Implements hook_form_user_register_form_alter().
 *
 * @param array $form
 * @param FormStateInterface $form_state
 */
function job_board_form_user_register_form_alter(array &$form, FormStateInterface $form_state) {
  $form['contact']['#access'] = FALSE;
  $form['user_picture']['#access'] = FALSE;
  $form['timezone']['#access'] = FALSE;

  if (\Drupal::request()->cookies->get('Drupal_visitor_jobPostRegister') || $form_state->get('job_post_register')) {
    $form_state->set('job_post_register', TRUE);
    $form['actions']['submit']['#submit'][] = 'job_board_user_register_form_submit_redirect';
  }
}

/**
 * Redirect the register form the the employer edit page in the correct circumstances.
 */
function job_board_user_register_form_submit_redirect(array $form, FormStateInterface $form_state) {
  /** @var \Drupal\user\UserInterface $user */
  $user = $form_state->get('user');
  $user->addRole('employer');
  $user->save();

  $form_state->setRedirect('job_board.employer_edit', [
    'user' => $user->id(),
  ]);

  user_cookie_save(['jobPostRegister' => TRUE]);
}

/**
 * Implements hook_form_alter().
 */
function job_board_form_user_employer_details_form_alter(array &$form, FormStateInterface $form_state) {
  dpm($form);
  if (\Drupal::request()->cookies->get('Drupal_visitor_jobPostRegister')) {
    $form['actions']['submit']['#submit'][] = 'job_board_user_employer_details_form_submit_redirect';
  }
}

/**
 * Redirect the employer details form to the job post form in correct circumstances.
 */
function job_board_user_employer_details_form_submit_redirect(array $form, FormStateInterface $form_state) {
  $form_state->setRedirect('job_board.post');
  user_cookie_delete('jobPostRegister');
}

/**
 * Get the Job Package Options.
 */
function job_board_job_package_options() {
  $info = job_board_job_package_info();

  $options = [];
  foreach ($info as $key => $package) {
    $options[$key] = $package['label'];
  }

  return $options;
}

/**
 * Get the Package Info.
 */
function job_board_job_package_info($key = NULL) {
  $info = [];
  $info['advert'] = [
    'label' => t('Basic Advert'),
    'description' => t('Advertise your Job on ChristianJobs.co.uk'),
    'price' => new Price('75.00', 'GBP'),
    'member_price' => new Price('50.00', 'GBP'),
    'allowed_featured_dates' => 1,
    'duration' => 'P30D',
    'features' => [
      [ 'title' => t('30 Days Exposure'), ],
      [ 'title' => t('Optional 60 Days Exposure (+£25)'), ],
      [ 'title' => t('Social Media'), ],
    ],
  ];
  $info['membership'] = [
    'label' => t('Membership'),
    'price' => new Price('295.00', 'GBP'),
    'description' => t('Become a Christian Jobs member and receive all these benefits.'),
    'allowed_featured_dates' => 5,
    'duration' => 'P60D',
    'features' => [
      [ 'title' => t('1 Free 60 Day Job Advert'), ],
      [ 'title' => t('Discounted Job Adverts for 1 Year'), ],
      [ 'title' => t('Dedicated Account Manager'), ],
      [ 'title' => t('Social Media Support'), ],
    ]
  ];
  $info['rpo'] = [
    'label' => t('RPO'),
    'description' => t('Let Christian Jobs take the load of your recruitment process.'),
    'price' => new Price('695.00', 'GBP'),
    'duration' => 'P60D',
    'features' => [
      [ 'title' => t('1 Free 60 Day Job Advert') ],
      [ 'title' => t('1 Year Free Membership') ],
      [ 'title' => t('Dedicated Account Manager') ],
      [ 'title' => t('Social Media Support') ],
    ],
  ];
  $info['executive_search'] = [
    'label' => t('Executive Search'),
    'description' => t('Let Christian Jobs find your perfect partner.'),
    'price' => t('from 10%'),
    'duration' => 'P60D',
    'features' => [
      [ 'title' => t('1 Free Job Advert') ],
      [ 'title' => t('Dedicated Account Manager') ],
    ],
  ];

  return $key ? (isset($info[$key]) ? $info[$key] : NULL) : $info;
}

/**
 * Get the default value for the contact_* fields on jobs.
 *
 * @param FieldableEntityInterface $entity
 * @param FieldDefinitionInterface $field_definition
 */
function job_board_job_role_contact_default_value(FieldableEntityInterface $entity, FieldDefinitionInterface $field_definition) {
  // Get the correct employer profile.
  if ($entity->organisation->entity) {
    $organisation = $entity->organisation->entity;
  }
  else if ($entity instanceof EntityOwnerInterface) {
    $organisation = $entity->getOwner();
  }
  else {
    $organisation = User::load(\Drupal::currentUser()->id());
  }

  if (!$organisation) {
    return [];
  }

  /** @var \Drupal\profile\Entity\ProfileInterface $employer_profile */
  $employer_profile = $organisation->profile_employer->entity;
  if (!$employer_profile) {
    return [];
  }

  $fields_map = [
    'contact_phone' => 'tel',
    'contact_address' => 'address',
    'contact_email' => 'email',
  ];
  $field_name = $field_definition->getName();
  if (!$fields_map[$field_name]) {
    return [];
  }

  return $employer_profile->{$fields_map[$field_name]}->getValue();
}
