<?php

use Drupal\Core\Config\Config;
use Drupal\Core\Config\FileStorage;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\datetime\Plugin\Field\FieldType\DateTimeItem;

/**
 * Implements hook_install().
 */
function job_board_install() {
  $manager = \Drupal::entityDefinitionUpdateManager();

  $fields['publish_date'] = BaseFieldDefinition::create('datetime')
    ->setSetting('datetime_type', DateTimeItem::DATETIME_TYPE_DATE)
    ->setLabel(t('Publish Date'))
    ->setDescription(t('The first date on which this job will be published.'))
    ->setRevisionable(TRUE)
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayConfigurable('form', TRUE)
    ->setName('publish_date')
    ->setTargetEntityTypeId('job_role')
    ->setProvider('job_board');
  $fields['paid_to_date'] = BaseFieldDefinition::create('datetime')
    ->setSetting('datetime_type', DateTimeItem::DATETIME_TYPE_DATE)
    ->setLabel(t('Paid To Date'))
    ->setDescription(t('The last date up to which this job has been paid.'))
    ->setRevisionable(TRUE)
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayConfigurable('form', TRUE);
  $fields['end_date'] = BaseFieldDefinition::create('datetime')
    ->setSetting('datetime_type', DateTimeItem::DATETIME_TYPE_DATE)
    ->setLabel(t('End Date'))
    ->setDescription(t('The last date on which this job will be published.'))
    ->setRevisionable(TRUE)
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayConfigurable('form', TRUE);
  $fields['paid'] = BaseFieldDefinition::create('boolean')
    ->setLabel(t('Paid'))
    ->setDescription(t('Has this job role been paid for.'))
    ->setSetting('on_label', t('Paid'))
    ->setSetting('off_label', t('Draft'))
    ->setCardinality(1)
    ->setRevisionable(TRUE)
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayConfigurable('form', TRUE);
  $fields['keywords'] = BaseFieldDefinition::create('entity_reference')
    ->setSetting('target_type', 'taxonomy_term')
    ->setSetting('handler', 'default:taxonomy_term')
    ->setSetting('handler_settings', [
      'target_bundles' => [
        'keywords' => 'keywords',
      ],
    ])
    ->setLabel(t('Keywords'))
    ->setDescription(t('Select up to 10 keywords to describe this job.'))
    ->setCardinality(10)
    ->setRevisionable(TRUE)
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayConfigurable('form', TRUE);
  $fields['industry'] = BaseFieldDefinition::create('entity_reference')
    ->setSetting('target_type', 'taxonomy_term')
    ->setSetting('handler', 'default:taxonomy_term')
    ->setSetting('handler_settings', [
      'target_bundles' => [
        'keywords' => 'industries',
      ],
    ])
    ->setLabel(t('Industry'))
    ->setDescription(t('Select an industry.'))
    ->setCardinality(1)
    ->setRevisionable(TRUE)
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayConfigurable('form', TRUE);
  $fields['compensation'] = BaseFieldDefinition::create('list_string')
    ->setSetting('allowed_values', [
      'volunteer' => t('Volunteer'),
      'apprentice' => t('Apprentice'),
      'pro_rate' => t('Pro-Rata'),
      'salaried' => t('Salaried'),
    ])
    ->setLabel(t('Compensation'))
    ->setDescription(t('How is the role compensated?'))
    ->setRevisionable(TRUE)
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayOptions('form', [
      'type' => 'options_select',
    ])
    ->setDisplayConfigurable('form', TRUE);
  $fields['hours'] = BaseFieldDefinition::create('list_string')
    ->setSetting('allowed_values', [
      'part_time' => t('Part Time'),
      'full_time' => t('Full Time'),
      'flexible' => t('Flexible'),
      'zero' => t('Zero-Hours'),
    ])
    ->setLabel(t('Hours'))
    ->setRevisionable(TRUE)
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayOptions('form', [
      'type' => 'options_select',
    ])
    ->setDisplayConfigurable('form', TRUE);
  $fields['location'] = BaseFieldDefinition::create('address')
    ->setLabel(t('Location'))
    ->setSetting('field_overrides', [
      'givenName' => ['override' => 'hidden'],
      'additionalName' => ['override' => 'hidden'],
      'familyName' => ['override' => 'hidden'],
      'organization' => ['override' => 'hidden'],
      'addressLine1' => ['override' => 'hidden'],
      'addressLine2' => ['override' => 'hidden'],
      'postalCode' => ['override' => 'hidden'],
      'sortingCode' => ['override' => 'hidden'],
      'dependentLocality' => ['override' => 'hidden'],
    ])
    ->setRevisionable(TRUE)
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayConfigurable('form', TRUE)
    ->setDisplayOptions('form', [
      'type' => 'address_default',
    ]);
  $fields['contact_phone'] = BaseFieldDefinition::create('telephone')
    ->setLabel(t('Contact Telephone'))
    ->setRevisionable(TRUE)
    ->setDefaultValueCallback('job_board_job_role_contact_default_value')
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayOptions('form', [
      'type' => 'telephone_default',
    ])
    ->setDisplayConfigurable('form', TRUE);
  $fields['contact_address'] = BaseFieldDefinition::create('address')
    ->setLabel(t('Contact Address'))
    ->setRevisionable(TRUE)
    ->setDefaultValueCallback('job_board_job_role_contact_default_value')
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayOptions('form', [
      'type' => 'address_default',
    ])
    ->setDisplayConfigurable('form', TRUE);
  $fields['contact_email'] = BaseFieldDefinition::create('email')
    ->setLabel(t('Contact E-mail Address'))
    ->setRevisionable(TRUE)
    ->setDefaultValueCallback('job_board_job_role_contact_default_value')
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayOptions('form', [
      'type' => 'email_default',
    ])
    ->setDisplayConfigurable('form', TRUE);

  foreach ($fields as $field_name => $definition) {
    $manager->installFieldStorageDefinition($field_name, 'job_role', 'job_board', $definition);
  }
}

/**
 * Add package and paid for fields.
 */
function job_board_update_8001() {
  $manager = \Drupal::entityDefinitionUpdateManager();

  $fields['paid'] = BaseFieldDefinition::create('boolean')
    ->setLabel(t('Paid'))
    ->setDescription(t('Has this job role been paid for.'))
    ->setSetting('on_label', t('Paid'))
    ->setSetting('off_label', t('Draft'))
    ->setCardinality(1)
    ->setRevisionable(TRUE)
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayConfigurable('form', TRUE);


  foreach ($fields as $field_name => $definition) {
    $manager->installFieldStorageDefinition($field_name, 'job_role', 'job_board', $definition);
  }
}

/**
 * Add profile fields to employer profile.
 */
function job_board_update_8002() {
  $source = new FileStorage(drupal_get_path('module', 'job_board').'/config/install');
  /** @var \Drupal\Core\Config\StorageInterface $config_storage */
  $config_storage = \Drupal::service('config.storage');

  $configs_to_install = [
    'field.storage.profile.email',
    'field.storage.profile.tel',
    'field.field.profile.employer.address',
    'field.field.profile.employer.email',
    'field.field.profile.employer.tel',
    'taxonomy.vocabulary.industries',
    'taxonomy.vocabulary.keywords',
  ];
  foreach ($configs_to_install as $name) {
    $config_storage->write($name, $source->read($name));
  }

  // Install taxonomy fields.
  $fields['keywords'] = BaseFieldDefinition::create('entity_reference')
    ->setSetting('target_type', 'taxonomy_term')
    ->setSetting('handler', 'default:taxonomy_term')
    ->setSetting('handler_settings', [
      'target_bundles' => [
        'keywords' => 'keywords',
      ],
    ])
    ->setLabel(t('Keywords'))
    ->setDescription(t('Select up to 10 keywords to describe this job.'))
    ->setCardinality(10)
    ->setRevisionable(TRUE)
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayConfigurable('form', TRUE);
  $fields['industry'] = BaseFieldDefinition::create('entity_reference')
    ->setSetting('target_type', 'taxonomy_term')
    ->setSetting('handler', 'default:taxonomy_term')
    ->setSetting('handler_settings', [
      'target_bundles' => [
        'keywords' => 'industries',
      ],
    ])
    ->setLabel(t('Industry'))
    ->setDescription(t('Select an industry.'))
    ->setCardinality(1)
    ->setRevisionable(TRUE)
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayConfigurable('form', TRUE);
  $fields['compensation'] = BaseFieldDefinition::create('list_string')
    ->setSetting('allowed_values', [
      'volunteer' => t('Volunteer'),
      'apprentice' => t('Apprentice'),
      'pro_rate' => t('Pro-Rata'),
      'salaried' => t('Salaried'),
    ])
    ->setLabel(t('Compensation'))
    ->setDescription(t('How is the role compensated?'))
    ->setRevisionable(TRUE)
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayOptions('form', [
      'type' => 'options_select',
    ])
    ->setDisplayConfigurable('form', TRUE);
  $fields['hours'] = BaseFieldDefinition::create('list_string')
    ->setSetting('allowed_values', [
      'part_time' => t('Part Time'),
      'full_time' => t('Full Time'),
      'flexible' => t('Flexible'),
      'zero' => t('Zero-Hours'),
    ])
    ->setLabel(t('Hours'))
    ->setRevisionable(TRUE)
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayOptions('form', [
      'type' => 'options_select',
    ])
    ->setDisplayConfigurable('form', TRUE);
  $fields['location'] = BaseFieldDefinition::create('address')
    ->setLabel(t('Location'))
    ->setSetting('field_overrides', [
      'givenName' => ['override' => 'hidden'],
      'additionalName' => ['override' => 'hidden'],
      'familyName' => ['override' => 'hidden'],
      'organization' => ['override' => 'hidden'],
      'addressLine1' => ['override' => 'hidden'],
      'addressLine2' => ['override' => 'hidden'],
      'postalCode' => ['override' => 'hidden'],
      'sortingCode' => ['override' => 'hidden'],
      'dependentLocality' => ['override' => 'hidden'],
    ])
    ->setRevisionable(TRUE)
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayConfigurable('form', TRUE)
    ->setDisplayOptions('form', [
      'type' => 'address_default',
    ]);
  $fields['contact_phone'] = BaseFieldDefinition::create('telephone')
    ->setLabel(t('Contact Telephone'))
    ->setRevisionable(TRUE)
    ->setDefaultValueCallback('job_board_job_role_contact_default_value')
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayOptions('form', [
      'type' => 'telephone_default',
    ])
    ->setDisplayConfigurable('form', TRUE);
  $fields['contact_address'] = BaseFieldDefinition::create('address')
    ->setLabel(t('Contact Address'))
    ->setRevisionable(TRUE)
    ->setDefaultValueCallback('job_board_job_role_contact_default_value')
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayOptions('form', [
      'type' => 'address_default',
    ])
    ->setDisplayConfigurable('form', TRUE);
  $fields['contact_email'] = BaseFieldDefinition::create('email')
    ->setLabel(t('Contact E-mail Address'))
    ->setRevisionable(TRUE)
    ->setDefaultValueCallback('job_board_job_role_contact_default_value')
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayOptions('form', [
      'type' => 'email_default',
    ])
    ->setDisplayConfigurable('form', TRUE);

  $manager = \Drupal::entityDefinitionUpdateManager();
  foreach ($fields as $field_name => $definition) {
    $manager->installFieldStorageDefinition($field_name, 'job_role', 'job_board', $definition);
  }
}

/**
 * Install view modes
 */
function job_board_update_8003() {
  $source = new FileStorage(drupal_get_path('module', 'job_board').'/config/install');
  /** @var \Drupal\Core\Config\StorageInterface $config_storage */
  $config_storage = \Drupal::service('config.storage');

  $configs_to_install = [
    'core.entity_form_mode.user.employer_details',
    'core.entity_view_mode.user.employer_page',
    'core.entity_view_mode.user.employer_block',
    'core.entity_form_mode.job_role.post',
    'core.entity_view_mode.job_role.page',
  ];
  foreach ($configs_to_install as $name) {
    $config_storage->write($name, $source->read($name));
  }
}

/**
 * Uninstall fields we're not going to use.
 */
function job_board_update_8004() {
  $manager = \Drupal::entityDefinitionUpdateManager();
  $job_role = $manager->getEntityType('job_role');
  $keys = $job_role->getKeys();
  unset($keys['bundle']);
  $job_role->set('entity_keys', $keys);
  $manager->updateEntityType($job_role);

  $fields = ['type', 'featured_dates', 'package'];
  foreach ($fields as $field_name) {
    if ($definition = $manager->getFieldStorageDefinition($field_name, 'job_role')) {
      $manager->uninstallFieldStorageDefinition($definition);
    }
  }

  $fields = [];
  $fields['initial_duration'] = BaseFieldDefinition::create('list_string')
    ->setSetting('allowed_values', [
      'P30D' => new TranslatableMarkup('30 Days'),
      'P60D' => new TranslatableMarkup('60 Days'),
    ])
    ->setLabel(new TranslatableMarkup('Duration'))
    ->setRevisionable(TRUE)
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayConfigurable('form', TRUE);
  $fields['rpo'] = BaseFieldDefinition::create('boolean')
    ->setLabel(new TranslatableMarkup('RPO Requested'))
    ->setDescription(new TranslatableMarkup('Appoint a Christian Jobs Recruitment Agent to walk you through the recruitment process.'))
    ->setSetting('on_label', new TranslatableMarkup('Use RPO Services'))
    ->setSetting('off_label', new TranslatableMarkup('Do Not Use RPO Services'))
    ->setRevisionable(TRUE)
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayConfigurable('form', TRUE);
  foreach ($fields as $field_name => $field) {
    $manager->installFieldStorageDefinition($field_name, 'job_role', 'job_board', $field);
  }
}

/**
 * Install the full view mode for better compatability.
 */
function job_board_update_8005() {
  // Install modules
  \Drupal::service('module_installer')->install([
    'flexilayout_builder',
    'field_tools',
    'profile_tools',
  ]);

  $source = new FileStorage(drupal_get_path('module', 'job_board').'/config/install');
  /** @var \Drupal\Core\Config\StorageInterface $config_storage */
  $config_storage = \Drupal::service('config.storage');

  $configs_to_install = [
    'core.entity_view_mode.job_role.full',
    'core.entity_view_display.job_role.job_role.full',
  ];
  foreach ($configs_to_install as $name) {
    $config_storage->write($name, $source->read($name));
  }
}

/**
 * Install the tax
 */
function job_board_update_8006() {
  // Install modules
  \Drupal::service('module_installer')->install([
    'commerce_tax',
  ]);

  $source = new FileStorage(drupal_get_path('module', 'job_board').'/config/install');
  /** @var \Drupal\Core\Config\StorageInterface $config_storage */
  $config_storage = \Drupal::service('config.storage');

  $configs_to_install = [
    'commerce_order.commerce_order_item_type.job_board_job_role',
  ];
  foreach ($configs_to_install as $name) {
    $config_storage->write($name, $source->read($name));
  }
}

/**
 * Update layout.
 */
function job_board_update_8007() {
  $source = new FileStorage(drupal_get_path('module', 'job_board').'/config/install');
  /** @var \Drupal\Core\Config\StorageInterface $config_storage */
  $config_storage = \Drupal::service('config.storage');

  $configs_to_install = [
    'core.entity_view_display.job_role.job_role.full',
    'core.entity_view_mode.job_role.search_re',
    'views.view.job_board',
  ];
  foreach ($configs_to_install as $name) {
    $config_storage->write($name, $source->read($name));
  }
}

/**
 * Uninstall field definitions if present.
 */
function job_board_update_8008() {
  $update_manager = \Drupal::entityDefinitionUpdateManager();
  foreach (['featured_dates', 'package'] as $field_name) {
    if ($storage_def = $update_manager->getFieldStorageDefinition($field_name, 'job_role')) {
      $update_manager->uninstallFieldStorageDefinition($storage_def);
    }
  }
}

/**
 * Install application deadline field.
 */
function job_board_update_8009() {
  $fields['application_deadline'] = BaseFieldDefinition::create('datetime')
    ->setSetting('datetime_type', DateTimeItem::DATETIME_TYPE_DATE)
    ->setLabel(t('Application Deadline'))
    ->setDescription(t('The last date on which applications will be submitted. If this is before the end of the adverts duration, the job will not be visible after this date.'))
    ->setRevisionable(TRUE)
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayConfigurable('form', TRUE)
    ->setDisplayOptions('form', [
      'type' => 'datetime_default',
    ]);

  $manager = \Drupal::entityDefinitionUpdateManager();
  foreach ($fields as $field_name => $definition) {
    $manager->installFieldStorageDefinition($field_name, 'job_role', 'job_board', $definition);
  }
}

/**
 * Update layout.
 */
function job_board_update_8010() {
  $source = new FileStorage(drupal_get_path('module', 'job_board').'/config/install');
  /** @var \Drupal\Core\Config\StorageInterface $config_storage */
  $config_storage = \Drupal::service('config.storage');

  $configs_to_install = [
    'core.entity_view_display.user.user.full',
    'views.view.client_jobs',
  ];
  foreach ($configs_to_install as $name) {
    $config_storage->write($name, $source->read($name));
  }
}

/**
 * Update layout.
 */
function job_board_update_8011() {
  $source = new FileStorage(drupal_get_path('module', 'job_board').'/config/install');
  /** @var \Drupal\Core\Config\StorageInterface $config_storage */
  $config_storage = \Drupal::service('config.storage');

  $configs_to_install = [
    'views.view.job_board',
  ];
  foreach ($configs_to_install as $name) {
    $config_storage->write($name, $source->read($name));
  }
}

/**
 * Install application deadline field.
 */
function job_board_update_8012() {
  $fields['boost_start_date'] = BaseFieldDefinition::create('datetime')
    ->setSetting('datetime_type', DateTimeItem::DATETIME_TYPE_DATE)
    ->setLabel(t('Boost Start Date'))
    ->setDescription(t('Thedate on which to start boosting this job.'))
    ->setRevisionable(TRUE)
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayConfigurable('form', TRUE);
  $fields['boost_end_date'] = BaseFieldDefinition::create('datetime')
    ->setSetting('datetime_type', DateTimeItem::DATETIME_TYPE_DATE)
    ->setLabel(t('Boost End Date'))
    ->setDescription(t('The date on which to stop boosting this job.'))
    ->setRevisionable(TRUE)
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayConfigurable('form', TRUE);

  $manager = \Drupal::entityDefinitionUpdateManager();
  foreach ($fields as $field_name => $definition) {
    $manager->installFieldStorageDefinition($field_name, 'job_role', 'job_board', $definition);
  }
}

/**
 * Organisation filter.
 */
function job_board_update_8013() {
  $source = new FileStorage(drupal_get_path('module', 'job_board').'/config/install');
  /** @var \Drupal\Core\Config\StorageInterface $config_storage */
  $config_storage = \Drupal::service('config.storage');

  $configs_to_install = [
    'views.view.job_board',
  ];
  foreach ($configs_to_install as $name) {
    $config_storage->write($name, $source->read($name));
  }
}

/**
 * Organisation filter.
 */
function job_board_update_8014() {
  $source = new FileStorage(drupal_get_path('module', 'job_board').'/config/install');
  /** @var \Drupal\Core\Config\StorageInterface $config_storage */
  $config_storage = \Drupal::service('config.storage');

  $configs_to_install = [
    'views.view.job_board',
    'views.view.employer_selection',
  ];
  foreach ($configs_to_install as $name) {
    $config_storage->write($name, $source->read($name));
  }
}

/**
 * Field Improvements.
 */
function job_board_update_8016() {
  \Drupal::service('module_installer')->install(['geofield', 'geocoder', 'geocoder_address', 'geocoder_geofield', 'geocoder_field', 'google_analytics']);

  $fields['location_type'] = BaseFieldDefinition::create('list_string')
    ->setLabel(t('Location Type'))
    ->setSetting('allowed_values', [
      'home' => new TranslatableMarkup('Home based'),
      'remote' => new TranslatableMarkup('Remote working'),
      'office' => new TranslatableMarkup('Office based'),
      'location' => new TranslatableMarkup('On location'),
    ])
    ->setRevisionable(TRUE)
    ->setRequired(TRUE)
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayConfigurable('form', TRUE);

  $fields['description_summary'] = BaseFieldDefinition::create('text_long')
    ->setLabel(t('Job Description Summary'))
    ->setDescription(t('Enter a short summary of your opportunity.'))
    ->setRevisionable(TRUE)
    ->setRequired(TRUE)
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayConfigurable('form', TRUE)
    ->setDisplayOptions('form', [
      'weight' => -5,
      'type' => 'text_textarea',
    ]);

  $fields['location_geo'] = BaseFieldDefinition::create('geofield')
    ->setLabel('Location Geo')
    ->setRevisionable(TRUE)
    ->setRequired(TRUE)
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayConfigurable('form', TRUE);

  $manager = \Drupal::entityDefinitionUpdateManager();
  foreach ($fields as $field_name => $definition) {
    $manager->installFieldStorageDefinition($field_name, 'job_role', 'job_board', $definition);
  }

  $source = new FileStorage(drupal_get_path('module', 'job_board').'/config/install');
  /** @var \Drupal\Core\Config\StorageInterface $config_storage */
  $config_storage = \Drupal::service('config.storage');

  $configs_to_install = [
    'views.view.job_board',
  ];
  foreach ($configs_to_install as $name) {
    $config_storage->write($name, $source->read($name));
  }
}

/**
 * Location Tree Field
 */
function job_board_update_8017() {
  $fields['location_tree'] = BaseFieldDefinition::create('entity_reference')
    ->setLabel('Location (Tree)')
    ->setSetting('target_type', 'taxonomy_term')
    ->setSetting('handler', 'default:taxonomy_term')
    ->setSetting('handler_settings', [
      'target_bundles' => [
        'locations' => 'locations',
      ],
      'auto_create' => TRUE,
      'auto_create_bundle' => 'locations',
    ])
    ->setRevisionable(TRUE)
    ->setDisplayConfigurable('view', TRUE)
    ->setCardinality(BaseFieldDefinition::CARDINALITY_UNLIMITED);
  $manager = \Drupal::entityDefinitionUpdateManager();
  foreach ($fields as $field_name => $definition) {
    $manager->installFieldStorageDefinition($field_name, 'job_role', 'job_board', $definition);
  }

  $vocab = \Drupal::entityTypeManager()->getStorage('taxonomy_vocabulary')
    ->create([
      'status' => TRUE,
      'name' => 'Locations',
      'vid' => 'locations',
      'hierarchy' => 1,
      'description' => 'Location Region Tree',
    ]);
  $vocab->save();
}

/**
 * Field Improvements.
 */
function job_board_update_8018() {
  $source = new FileStorage(drupal_get_path('module', 'job_board').'/config/install');
  /** @var \Drupal\Core\Config\StorageInterface $config_storage */
  $config_storage = \Drupal::service('config.storage');

  $configs_to_install = [
    'views.view.job_board',
  ];
  foreach ($configs_to_install as $name) {
    $config_storage->write($name, $source->read($name));
  }
}

/**
 * Add pathauto
 */
function job_board_update_8019() {
  $source = new FileStorage(drupal_get_path('module', 'job_board').'/config/install');
  /** @var \Drupal\Core\Config\StorageInterface $config_storage */
  $config_storage = \Drupal::service('config.storage');

  /** @var \Drupal\Core\Config\ConfigManagerInterface $config_manager */
  $config_manager = \Drupal::service('config.manager');
  $configs_to_install = [
    'user.role.bank_transfer_payer',
    'commerce_payment.commerce_payment_gateway.bank_transfer',
  ];
  foreach ($configs_to_install as $name) {
    $config = new Config(
      $name,
      \Drupal::service('config.storage'),
      \Drupal::service('event_dispatcher'),
      \Drupal::service('config.typed')
    );
    $config->setData($source->read($name));

    if ($entity_type = $config_manager->getEntityTypeIdByName($name)) {
      /** @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface $entity_storage */
      $entity_storage = $config_manager->getEntityManager()->getStorage($entity_type);

      $id = $entity_storage->getIDFromConfigName($name, $entity_storage->getEntityType()->getConfigPrefix());
      if ($config_storage->exists($name)) {
        /** @var \Drupal\Core\Config\Entity\ConfigEntityBase $entity */
        $entity = $entity_storage->load($id);
        $entity = $entity_storage->updateFromStorageRecord($entity, $config->get());
      }
      else {
        $entity = $entity_storage->createFromStorageRecord($config->get());
      }

      if ($entity->isInstallable()) {
        $entity->trustData()->save();
      }
    }
    else {
      $config->save();
    }
  }
}

/**
 * Update layout.
 */
function job_board_update_8020() {
  $source = new FileStorage(drupal_get_path('module', 'job_board').'/config/install');
  /** @var \Drupal\Core\Config\StorageInterface $config_storage */
  $config_storage = \Drupal::service('config.storage');

  /** @var \Drupal\Core\Config\ConfigManagerInterface $config_manager */
  $config_manager = \Drupal::service('config.manager');
  $configs_to_install = [
    'commerce_order.commerce_order_item_type.job_board_job_extension',
  ];
  foreach ($configs_to_install as $name) {
    $config = new Config(
      $name,
      \Drupal::service('config.storage'),
      \Drupal::service('event_dispatcher'),
      \Drupal::service('config.typed')
    );
    $config->setData($source->read($name));

    if ($entity_type = $config_manager->getEntityTypeIdByName($name)) {
      /** @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface $entity_storage */
      $entity_storage = $config_manager->getEntityManager()->getStorage($entity_type);

      $id = $entity_storage->getIDFromConfigName($name, $entity_storage->getEntityType()->getConfigPrefix());
      if ($config_storage->exists($name)) {
        /** @var \Drupal\Core\Config\Entity\ConfigEntityBase $entity */
        $entity = $entity_storage->load($id);
        $entity = $entity_storage->updateFromStorageRecord($entity, $config->get());
      }
      else {
        $entity = $entity_storage->createFromStorageRecord($config->get());
      }

      if ($entity->isInstallable()) {
        $entity->trustData()->save();
      }
    }
    else {
      $config->save();
    }
  }

  // Clear plugin manager caches.
  \Drupal::getContainer()->get('plugin.cache_clearer')->clearCachedDefinitions();
}

/**
 * Update layout.
 */
function job_board_update_8021() {
  $source = new FileStorage(drupal_get_path('module', 'job_board').'/config/install');
  /** @var \Drupal\Core\Config\StorageInterface $config_storage */
  $config_storage = \Drupal::service('config.storage');

  /** @var \Drupal\Core\Config\ConfigManagerInterface $config_manager */
  $config_manager = \Drupal::service('config.manager');
  $configs_to_install = [
    'field.storage.profile.employer_charity_number',
    'field.storage.profile.employer_is_charity',
    'field.field.profile.employer.employer_charity_number',
    'field.field.profile.employer.employer_is_charity',
  ];
  foreach ($configs_to_install as $name) {
    $config = new Config(
      $name,
      \Drupal::service('config.storage'),
      \Drupal::service('event_dispatcher'),
      \Drupal::service('config.typed')
    );
    $config->setData($source->read($name));

    if ($entity_type = $config_manager->getEntityTypeIdByName($name)) {
      /** @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface $entity_storage */
      $entity_storage = $config_manager->getEntityManager()->getStorage($entity_type);

      $id = $entity_storage->getIDFromConfigName($name, $entity_storage->getEntityType()->getConfigPrefix());
      if ($config_storage->exists($name)) {
        /** @var \Drupal\Core\Config\Entity\ConfigEntityBase $entity */
        $entity = $entity_storage->load($id);
        $entity = $entity_storage->updateFromStorageRecord($entity, $config->get());
      }
      else {
        $entity = $entity_storage->createFromStorageRecord($config->get());
      }

      if ($entity->isInstallable()) {
        $entity->trustData()->save();
      }
    }
    else {
      $config->save();
    }
  }

  // Clear plugin manager caches.
  \Drupal::getContainer()->get('plugin.cache_clearer')->clearCachedDefinitions();
}

/**
 * Install paid_to_date field.
 */
function job_board_update_8022() {
  $field_name = 'paid_to_date';
  $definition = BaseFieldDefinition::create('datetime')
    ->setSetting('datetime_type', DateTimeItem::DATETIME_TYPE_DATE)
    ->setLabel(t('Paid To Date'))
    ->setDescription(t('The last date up to which this job has been paid.'))
    ->setRevisionable(TRUE)
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayConfigurable('form', TRUE);

  \Drupal::entityDefinitionUpdateManager()->installFieldStorageDefinition(
    $field_name,
    'job_role',
    'job_board',
    $definition
  );
}

/**
 * Install organisation directory fields.
 */
function job_board_update_8023() {
  $source = new FileStorage(drupal_get_path('module', 'job_board') . '/config/install');
  /** @var \Drupal\Core\Config\StorageInterface $config_storage */
  $config_storage = \Drupal::service('config.storage');

  /** @var \Drupal\Core\Config\ConfigManagerInterface $config_manager */
  $config_manager = \Drupal::service('config.manager');
  $configs_to_install = [
    'field.storage.profile.employer_categories',
    'field.storage.profile.employer_on_directory',
    'field.storage.profile.employer_type',
    'field.storage.profile.employer_website',
    'field.field.profile.employer.employer_categories',
    'field.field.profile.employer.employer_type',
    'field.field.profile.employer.employer_website',
    'field.field.profile.employer.employer_on_directory',
  ];
  foreach ($configs_to_install as $name) {
    $config = new Config($name, \Drupal::service('config.storage'), \Drupal::service('event_dispatcher'), \Drupal::service('config.typed'));
    $config->setData($source->read($name));

    if ($entity_type = $config_manager->getEntityTypeIdByName($name)) {
      /** @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface $entity_storage */
      $entity_storage = $config_manager->getEntityManager()->getStorage($entity_type);

      $id = $entity_storage->getIDFromConfigName($name, $entity_storage->getEntityType()->getConfigPrefix());
      if ($config_storage->exists($name)) {
        /** @var \Drupal\Core\Config\Entity\ConfigEntityBase $entity */
        $entity = $entity_storage->load($id);
        $entity = $entity_storage->updateFromStorageRecord($entity, $config->get());
      }
      else {
        $entity = $entity_storage->createFromStorageRecord($config->get());
      }

      if ($entity->isInstallable()) {
        $entity->trustData()->save();
      }
    }
    else {
      $config->save();
    }
  }

  // Clear plugin manager caches.
  \Drupal::getContainer()->get('plugin.cache_clearer')->clearCachedDefinitions();
}

/**
 * Install organisation directory pages and search.
 */
function job_board_update_8024() {
  /** @var \Drupal\Core\Extension\ModuleInstallerInterface $installer */
  $installer = \Drupal::service('module_installer');
  $installer->install([
    'search_api', 'elasticsearch_connector', 'elasticsearch_aws_connector', 'facets',
  ]);

  $source = new FileStorage(drupal_get_path('module', 'job_board') . '/config/install');
  /** @var \Drupal\Core\Config\StorageInterface $config_storage */
  $config_storage = \Drupal::service('config.storage');

  /** @var \Drupal\Core\Config\ConfigManagerInterface $config_manager */
  $config_manager = \Drupal::service('config.manager');
  $configs_to_install = [
    'field.storage.profile.address_geo',
    'field.storage.profile.address_tree',
    'field.storage.profile.employer_description_summary',
    'field.field.profile.employer.address_geo',
    'field.field.profile.employer.address_tree',
    'field.field.profile.employer.employer_description_summary',
    'elasticsearch_connector.cluster.aws_christian_jobs',
    'search_api.server.aws_christian_jobs_elasticsearch',
    'search_api.index.employer_directory',
    'views.view.employer_directory',
    'views.view.job_board',
    'core.entity_form_display.user.user.employer_details',
    'core.entity_view_display.job_role.job_role.full',
    'core.entity_view_mode.user.employer_page',
    'core.entity_view_display.user.user.employer_page',
    'facets.facet.employer_address_tree',
    'facets.facet.employer_categories',
    'facets.facet_source.search_api__views_page__employer_directory__page',
  ];
  foreach ($configs_to_install as $name) {
    $config = new Config($name, \Drupal::service('config.storage'), \Drupal::service('event_dispatcher'), \Drupal::service('config.typed'));
    $config->setData($source->read($name));

    if ($entity_type = $config_manager->getEntityTypeIdByName($name)) {
      /** @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface $entity_storage */
      $entity_storage = $config_manager->getEntityManager()->getStorage($entity_type);

      $id = $entity_storage->getIDFromConfigName($name, $entity_storage->getEntityType()->getConfigPrefix());
      if ($config_storage->exists($name)) {
        /** @var \Drupal\Core\Config\Entity\ConfigEntityBase $entity */
        $entity = $entity_storage->load($id);
        $entity = $entity_storage->updateFromStorageRecord($entity, $config->get());
      }
      else {
        $entity = $entity_storage->createFromStorageRecord($config->get());
      }

      if ($entity->isInstallable()) {
        $entity->trustData()->save();
      }
    }
    else {
      $config->save();
    }
  }

  // Clear plugin manager caches.
  \Drupal::getContainer()->get('plugin.cache_clearer')->clearCachedDefinitions();
}

/**
 * Install flag module.
 */
function job_board_update_8025() {
  /** @var \Drupal\Core\Extension\ModuleInstallerInterface $installer */
  $installer = \Drupal::service('module_installer');
  $installer->install(['flag', 'mini_layouts']);

  $source = new FileStorage(drupal_get_path('module', 'job_board') . '/config/install');
  /** @var \Drupal\Core\Config\StorageInterface $config_storage */
  $config_storage = \Drupal::service('config.storage');

  /** @var \Drupal\Core\Config\ConfigManagerInterface $config_manager */
  $config_manager = \Drupal::service('config.manager');
  $configs_to_install = [
    'flag.flag.employer_like',
    'mini_layouts.mini_layout.employer_directory__filters',
    'block.block.directoryfilters',
  ];
  foreach ($configs_to_install as $name) {
    $config = new Config($name, \Drupal::service('config.storage'), \Drupal::service('event_dispatcher'), \Drupal::service('config.typed'));
    $config->setData($source->read($name));

    if ($entity_type = $config_manager->getEntityTypeIdByName($name)) {
      /** @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface $entity_storage */
      $entity_storage = $config_manager->getEntityManager()->getStorage($entity_type);

      $id = $entity_storage->getIDFromConfigName($name, $entity_storage->getEntityType()->getConfigPrefix());
      if ($config_storage->exists($name)) {
        /** @var \Drupal\Core\Config\Entity\ConfigEntityBase $entity */
        $entity = $entity_storage->load($id);
        $entity = $entity_storage->updateFromStorageRecord($entity, $config->get());
      }
      else {
        $entity = $entity_storage->createFromStorageRecord($config->get());
      }

      if ($entity->isInstallable()) {
        $entity->trustData()->save();
      }
    }
    else {
      $config->save();
    }
  }

  // Clear plugin manager caches.
  \Drupal::getContainer()->get('plugin.cache_clearer')->clearCachedDefinitions();
}

function job_board_update_8026() {
  /** @var \Drupal\Core\Extension\ModuleInstallerInterface $module_installer */
  $module_installer = \Drupal::service('module_installer');
  $module_installer->uninstall(['cshs']);
  $module_installer->install(['geofield_map']);

  // Clear plugin manager caches.
  \Drupal::getContainer()->get('plugin.cache_clearer')->clearCachedDefinitions();

  $source = new FileStorage(drupal_get_path('module', 'job_board') . '/config/install');
  /** @var \Drupal\Core\Config\StorageInterface $config_storage */
  $config_storage = \Drupal::service('config.storage');

  /** @var \Drupal\Core\Config\ConfigManagerInterface $config_manager */
  $config_manager = \Drupal::service('config.manager');
  $configs_to_install = [
    'views.view.directory_map',
  ];
  foreach ($configs_to_install as $name) {
    $config = new Config($name, \Drupal::service('config.storage'), \Drupal::service('event_dispatcher'), \Drupal::service('config.typed'));
    $config->setData($source->read($name));

    if ($entity_type = $config_manager->getEntityTypeIdByName($name)) {
      /** @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface $entity_storage */
      $entity_storage = $config_manager->getEntityManager()->getStorage($entity_type);

      $id = $entity_storage->getIDFromConfigName($name, $entity_storage->getEntityType()->getConfigPrefix());
      if ($config_storage->exists($name)) {
        /** @var \Drupal\Core\Config\Entity\ConfigEntityBase $entity */
        $entity = $entity_storage->load($id);
        $entity = $entity_storage->updateFromStorageRecord($entity, $config->get());
      }
      else {
        $entity = $entity_storage->createFromStorageRecord($config->get());
      }

      if ($entity->isInstallable()) {
        $entity->trustData()->save();
      }
    }
    else {
      $config->save();
    }
  }

  // Clear plugin manager caches.
  \Drupal::getContainer()->get('plugin.cache_clearer')->clearCachedDefinitions();
}
